// If this file gets changed, you must recompile the generate package in pkg/proto.
// To do this, install the Go protobuf toolchain as mentioned in
// https://grpc.io/docs/languages/go/quickstart/#prerequisites.
// Then use following command from the repository's root to recompile it with gRPC support:
//   protoc --go-grpc_out=./pkg/ --go_out=./pkg/ ./pkg/hooks/grpc/proto/hook.proto
// In addition, it may be necessary to update the protobuf or gRPC dependencies as well.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: pkg/hooks/grpc/proto/hook.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HookRequest contains the information about the hook type, the involved upload,
// and causing HTTP request.
type HookRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type is the name of the hook.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Event contains the involved upload and causing HTTP request.
	Event         *Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HookRequest) Reset() {
	*x = HookRequest{}
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HookRequest) ProtoMessage() {}

func (x *HookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HookRequest.ProtoReflect.Descriptor instead.
func (*HookRequest) Descriptor() ([]byte, []int) {
	return file_pkg_hooks_grpc_proto_hook_proto_rawDescGZIP(), []int{0}
}

func (x *HookRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HookRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// Event represents an event from tusd which can be handled by the application.
type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Upload contains information about the upload that caused this hook
	// to be fired.
	Upload *FileInfo `protobuf:"bytes,1,opt,name=upload,proto3" json:"upload,omitempty"`
	// HTTPRequest contains details about the HTTP request that reached
	// tusd.
	HttpRequest   *HTTPRequest `protobuf:"bytes,2,opt,name=httpRequest,proto3" json:"httpRequest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pkg_hooks_grpc_proto_hook_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetUpload() *FileInfo {
	if x != nil {
		return x.Upload
	}
	return nil
}

func (x *Event) GetHttpRequest() *HTTPRequest {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

// FileInfo contains information about a single upload resource.
type FileInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is the unique identifier of the upload resource.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Total file size in bytes specified in the NewUpload call
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// Indicates whether the total file size is deferred until later
	SizeIsDeferred bool `protobuf:"varint,3,opt,name=sizeIsDeferred,proto3" json:"sizeIsDeferred,omitempty"`
	// Offset in bytes (zero-based)
	Offset   int64             `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	MetaData map[string]string `protobuf:"bytes,5,rep,name=metaData,proto3" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Indicates that this is a partial upload which will later be used to form
	// a final upload by concatenation. Partial uploads should not be processed
	// when they are finished since they are only incomplete chunks of files.
	IsPartial bool `protobuf:"varint,6,opt,name=isPartial,proto3" json:"isPartial,omitempty"`
	// Indicates that this is a final upload
	IsFinal bool `protobuf:"varint,7,opt,name=isFinal,proto3" json:"isFinal,omitempty"`
	// If the upload is a final one (see IsFinal) this will be a non-empty
	// ordered slice containing the ids of the uploads of which the final upload
	// will consist after concatenation.
	PartialUploads []string `protobuf:"bytes,8,rep,name=partialUploads,proto3" json:"partialUploads,omitempty"`
	// Storage contains information about where the data storage saves the upload,
	// for example a file path. The available values vary depending on what data
	// store is used. This map may also be nil.
	Storage map[string]string `protobuf:"bytes,9,rep,name=storage,proto3" json:"storage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Metadata storage should attatch to completed upload
	// The supported values vary depending on what storee is used. This map may also be nil.
	StorageFileMetadata map[string]string `protobuf:"bytes,10,rep,name=storageFileMetadata,proto3" json:"storageFileMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_pkg_hooks_grpc_proto_hook_proto_rawDescGZIP(), []int{2}
}

func (x *FileInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetSizeIsDeferred() bool {
	if x != nil {
		return x.SizeIsDeferred
	}
	return false
}

func (x *FileInfo) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FileInfo) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *FileInfo) GetIsPartial() bool {
	if x != nil {
		return x.IsPartial
	}
	return false
}

func (x *FileInfo) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *FileInfo) GetPartialUploads() []string {
	if x != nil {
		return x.PartialUploads
	}
	return nil
}

func (x *FileInfo) GetStorage() map[string]string {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *FileInfo) GetStorageFileMetadata() map[string]string {
	if x != nil {
		return x.StorageFileMetadata
	}
	return nil
}

// FileInfoChanges collects changes the should be made to a FileInfo object. This
// can be done using the PreUploadCreateCallback to modify certain properties before
// an upload is created. Properties which should not be modified (e.g. Size or Offset)
// are intentionally left out here.
type FileInfoChanges struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If ID is not empty, it will be passed to the data store, allowing
	// hooks to influence the upload ID. Be aware that a data store is not required to
	// respect a pre-defined upload ID and might overwrite or modify it. However,
	// all data stores in the github.com/tus/tusd package do respect pre-defined IDs.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// If MetaData is not nil, it replaces the entire user-defined meta data from
	// the upload creation request. You can add custom meta data fields this way
	// or ensure that only certain fields from the user-defined meta data are saved.
	// If you want to retain only specific entries from the user-defined meta data, you must
	// manually copy them into this MetaData field.
	// If you do not want to store any meta data, set this field to an empty map (`MetaData{}`).
	// If you want to keep the entire user-defined meta data, set this field to nil.
	MetaData map[string]string `protobuf:"bytes,2,rep,name=metaData,proto3" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If Storage is not nil, it is passed to the data store to allow for minor adjustments
	// to the upload storage (e.g. destination file name). The details are specific for each
	// data store and should be looked up in their respective documentation.
	// Please be aware that this behavior is currently not supported by any data store in
	// the github.com/tus/tusd package.
	Storage map[string]string `protobuf:"bytes,3,rep,name=storage,proto3" json:"storage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If StorageFileMetadata is not nil, it is passed to the data store to allow for minor adjustments
	// to the upload storage (e.g. destination file name). The details are specific for each
	// data store and should be looked up in their respective documentation.
	// Please be aware that this behavior is currently not supported by any data store in
	// the github.com/tus/tusd package.
	StorageFileMetadata map[string]string `protobuf:"bytes,4,rep,name=storageFileMetadata,proto3" json:"storageFileMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FileInfoChanges) Reset() {
	*x = FileInfoChanges{}
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfoChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfoChanges) ProtoMessage() {}

func (x *FileInfoChanges) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfoChanges.ProtoReflect.Descriptor instead.
func (*FileInfoChanges) Descriptor() ([]byte, []int) {
	return file_pkg_hooks_grpc_proto_hook_proto_rawDescGZIP(), []int{3}
}

func (x *FileInfoChanges) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileInfoChanges) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *FileInfoChanges) GetStorage() map[string]string {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *FileInfoChanges) GetStorageFileMetadata() map[string]string {
	if x != nil {
		return x.StorageFileMetadata
	}
	return nil
}

// HTTPRequest contains basic details of an incoming HTTP request.
type HTTPRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Method is the HTTP method, e.g. POST or PATCH.
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// URI is the full HTTP request URI, e.g. /files/fooo.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// RemoteAddr contains the network address that sent the request.
	RemoteAddr string `protobuf:"bytes,3,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	// Header contains all HTTP headers as present in the HTTP request.
	Header        map[string]string `protobuf:"bytes,4,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPRequest) Reset() {
	*x = HTTPRequest{}
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequest) ProtoMessage() {}

func (x *HTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequest.ProtoReflect.Descriptor instead.
func (*HTTPRequest) Descriptor() ([]byte, []int) {
	return file_pkg_hooks_grpc_proto_hook_proto_rawDescGZIP(), []int{4}
}

func (x *HTTPRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *HTTPRequest) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *HTTPRequest) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

// HookResponse is the response after a hook is executed.
type HookResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HTTPResponse's fields can be filled to modify the HTTP response.
	// This is only possible for pre-create, pre-finish and post-receive hooks.
	// For other hooks this value is ignored.
	// If multiple hooks modify the HTTP response, a later hook may overwrite the
	// modified values from a previous hook (e.g. if multiple post-receive hooks
	// are executed).
	// Example usages: Send an error to the client if RejectUpload/StopUpload are
	// set in the pre-create/post-receive hook. Send more information to the client
	// in the pre-finish hook.
	HttpResponse *HTTPResponse `protobuf:"bytes,1,opt,name=httpResponse,proto3" json:"httpResponse,omitempty"`
	// RejectUpload will cause the upload to be rejected and not be created during
	// POST request. This value is only respected for pre-create hooks. For other hooks,
	// it is ignored. Use the HTTPResponse field to send details about the rejection
	// to the client.
	RejectUpload bool `protobuf:"varint,2,opt,name=rejectUpload,proto3" json:"rejectUpload,omitempty"`
	// ChangeFileInfo can be set to change selected properties of an upload before
	// it has been created. See the handler.FileInfoChanges type for more details.
	// Changes are applied on a per-property basis, meaning that specifying just
	// one property leaves all others unchanged.
	// This value is only respected for pre-create hooks.
	ChangeFileInfo *FileInfoChanges `protobuf:"bytes,4,opt,name=changeFileInfo,proto3" json:"changeFileInfo,omitempty"`
	// StopUpload will cause the upload to be stopped during a PATCH request.
	// This value is only respected for post-receive hooks. For other hooks,
	// it is ignored. Use the HTTPResponse field to send details about the stop
	// to the client.
	StopUpload    bool `protobuf:"varint,3,opt,name=stopUpload,proto3" json:"stopUpload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HookResponse) Reset() {
	*x = HookResponse{}
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HookResponse) ProtoMessage() {}

func (x *HookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HookResponse.ProtoReflect.Descriptor instead.
func (*HookResponse) Descriptor() ([]byte, []int) {
	return file_pkg_hooks_grpc_proto_hook_proto_rawDescGZIP(), []int{5}
}

func (x *HookResponse) GetHttpResponse() *HTTPResponse {
	if x != nil {
		return x.HttpResponse
	}
	return nil
}

func (x *HookResponse) GetRejectUpload() bool {
	if x != nil {
		return x.RejectUpload
	}
	return false
}

func (x *HookResponse) GetChangeFileInfo() *FileInfoChanges {
	if x != nil {
		return x.ChangeFileInfo
	}
	return nil
}

func (x *HookResponse) GetStopUpload() bool {
	if x != nil {
		return x.StopUpload
	}
	return false
}

// HTTPResponse contains basic details of an outgoing HTTP response.
type HTTPResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// StatusCode is status code, e.g. 200 or 400.
	StatusCode int64 `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	// Header contains additional HTTP headers for the response.
	Header map[string]string `protobuf:"bytes,2,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Body is the response body.
	Body          string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPResponse) Reset() {
	*x = HTTPResponse{}
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponse) ProtoMessage() {}

func (x *HTTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_hooks_grpc_proto_hook_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponse.ProtoReflect.Descriptor instead.
func (*HTTPResponse) Descriptor() ([]byte, []int) {
	return file_pkg_hooks_grpc_proto_hook_proto_rawDescGZIP(), []int{6}
}

func (x *HTTPResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HTTPResponse) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HTTPResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

var File_pkg_hooks_grpc_proto_hook_proto protoreflect.FileDescriptor

const file_pkg_hooks_grpc_proto_hook_proto_rawDesc = "" +
	"\n" +
	"\x1fpkg/hooks/grpc/proto/hook.proto\x12\x05proto\"E\n" +
	"\vHookRequest\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\"\n" +
	"\x05event\x18\x02 \x01(\v2\f.proto.EventR\x05event\"f\n" +
	"\x05Event\x12'\n" +
	"\x06upload\x18\x01 \x01(\v2\x0f.proto.FileInfoR\x06upload\x124\n" +
	"\vhttpRequest\x18\x02 \x01(\v2\x12.proto.HTTPRequestR\vhttpRequest\"\xde\x04\n" +
	"\bFileInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12&\n" +
	"\x0esizeIsDeferred\x18\x03 \x01(\bR\x0esizeIsDeferred\x12\x16\n" +
	"\x06offset\x18\x04 \x01(\x03R\x06offset\x129\n" +
	"\bmetaData\x18\x05 \x03(\v2\x1d.proto.FileInfo.MetaDataEntryR\bmetaData\x12\x1c\n" +
	"\tisPartial\x18\x06 \x01(\bR\tisPartial\x12\x18\n" +
	"\aisFinal\x18\a \x01(\bR\aisFinal\x12&\n" +
	"\x0epartialUploads\x18\b \x03(\tR\x0epartialUploads\x126\n" +
	"\astorage\x18\t \x03(\v2\x1c.proto.FileInfo.StorageEntryR\astorage\x12Z\n" +
	"\x13storageFileMetadata\x18\n" +
	" \x03(\v2(.proto.FileInfo.StorageFileMetadataEntryR\x13storageFileMetadata\x1a;\n" +
	"\rMetaDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fStorageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aF\n" +
	"\x18StorageFileMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc6\x03\n" +
	"\x0fFileInfoChanges\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12@\n" +
	"\bmetaData\x18\x02 \x03(\v2$.proto.FileInfoChanges.MetaDataEntryR\bmetaData\x12=\n" +
	"\astorage\x18\x03 \x03(\v2#.proto.FileInfoChanges.StorageEntryR\astorage\x12a\n" +
	"\x13storageFileMetadata\x18\x04 \x03(\v2/.proto.FileInfoChanges.StorageFileMetadataEntryR\x13storageFileMetadata\x1a;\n" +
	"\rMetaDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fStorageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aF\n" +
	"\x18StorageFileMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xca\x01\n" +
	"\vHTTPRequest\x12\x16\n" +
	"\x06method\x18\x01 \x01(\tR\x06method\x12\x10\n" +
	"\x03uri\x18\x02 \x01(\tR\x03uri\x12\x1e\n" +
	"\n" +
	"remoteAddr\x18\x03 \x01(\tR\n" +
	"remoteAddr\x126\n" +
	"\x06header\x18\x04 \x03(\v2\x1e.proto.HTTPRequest.HeaderEntryR\x06header\x1a9\n" +
	"\vHeaderEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcb\x01\n" +
	"\fHookResponse\x127\n" +
	"\fhttpResponse\x18\x01 \x01(\v2\x13.proto.HTTPResponseR\fhttpResponse\x12\"\n" +
	"\frejectUpload\x18\x02 \x01(\bR\frejectUpload\x12>\n" +
	"\x0echangeFileInfo\x18\x04 \x01(\v2\x16.proto.FileInfoChangesR\x0echangeFileInfo\x12\x1e\n" +
	"\n" +
	"stopUpload\x18\x03 \x01(\bR\n" +
	"stopUpload\"\xb6\x01\n" +
	"\fHTTPResponse\x12\x1e\n" +
	"\n" +
	"statusCode\x18\x01 \x01(\x03R\n" +
	"statusCode\x127\n" +
	"\x06header\x18\x02 \x03(\v2\x1f.proto.HTTPResponse.HeaderEntryR\x06header\x12\x12\n" +
	"\x04body\x18\x03 \x01(\tR\x04body\x1a9\n" +
	"\vHeaderEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012F\n" +
	"\vHookHandler\x127\n" +
	"\n" +
	"InvokeHook\x12\x12.proto.HookRequest\x1a\x13.proto.HookResponse\"\x00B\x12Z\x10hooks/grpc/protob\x06proto3"

var (
	file_pkg_hooks_grpc_proto_hook_proto_rawDescOnce sync.Once
	file_pkg_hooks_grpc_proto_hook_proto_rawDescData []byte
)

func file_pkg_hooks_grpc_proto_hook_proto_rawDescGZIP() []byte {
	file_pkg_hooks_grpc_proto_hook_proto_rawDescOnce.Do(func() {
		file_pkg_hooks_grpc_proto_hook_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_hooks_grpc_proto_hook_proto_rawDesc), len(file_pkg_hooks_grpc_proto_hook_proto_rawDesc)))
	})
	return file_pkg_hooks_grpc_proto_hook_proto_rawDescData
}

var file_pkg_hooks_grpc_proto_hook_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_pkg_hooks_grpc_proto_hook_proto_goTypes = []any{
	(*HookRequest)(nil),     // 0: proto.HookRequest
	(*Event)(nil),           // 1: proto.Event
	(*FileInfo)(nil),        // 2: proto.FileInfo
	(*FileInfoChanges)(nil), // 3: proto.FileInfoChanges
	(*HTTPRequest)(nil),     // 4: proto.HTTPRequest
	(*HookResponse)(nil),    // 5: proto.HookResponse
	(*HTTPResponse)(nil),    // 6: proto.HTTPResponse
	nil,                     // 7: proto.FileInfo.MetaDataEntry
	nil,                     // 8: proto.FileInfo.StorageEntry
	nil,                     // 9: proto.FileInfo.StorageFileMetadataEntry
	nil,                     // 10: proto.FileInfoChanges.MetaDataEntry
	nil,                     // 11: proto.FileInfoChanges.StorageEntry
	nil,                     // 12: proto.FileInfoChanges.StorageFileMetadataEntry
	nil,                     // 13: proto.HTTPRequest.HeaderEntry
	nil,                     // 14: proto.HTTPResponse.HeaderEntry
}
var file_pkg_hooks_grpc_proto_hook_proto_depIdxs = []int32{
	1,  // 0: proto.HookRequest.event:type_name -> proto.Event
	2,  // 1: proto.Event.upload:type_name -> proto.FileInfo
	4,  // 2: proto.Event.httpRequest:type_name -> proto.HTTPRequest
	7,  // 3: proto.FileInfo.metaData:type_name -> proto.FileInfo.MetaDataEntry
	8,  // 4: proto.FileInfo.storage:type_name -> proto.FileInfo.StorageEntry
	9,  // 5: proto.FileInfo.storageFileMetadata:type_name -> proto.FileInfo.StorageFileMetadataEntry
	10, // 6: proto.FileInfoChanges.metaData:type_name -> proto.FileInfoChanges.MetaDataEntry
	11, // 7: proto.FileInfoChanges.storage:type_name -> proto.FileInfoChanges.StorageEntry
	12, // 8: proto.FileInfoChanges.storageFileMetadata:type_name -> proto.FileInfoChanges.StorageFileMetadataEntry
	13, // 9: proto.HTTPRequest.header:type_name -> proto.HTTPRequest.HeaderEntry
	6,  // 10: proto.HookResponse.httpResponse:type_name -> proto.HTTPResponse
	3,  // 11: proto.HookResponse.changeFileInfo:type_name -> proto.FileInfoChanges
	14, // 12: proto.HTTPResponse.header:type_name -> proto.HTTPResponse.HeaderEntry
	0,  // 13: proto.HookHandler.InvokeHook:input_type -> proto.HookRequest
	5,  // 14: proto.HookHandler.InvokeHook:output_type -> proto.HookResponse
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pkg_hooks_grpc_proto_hook_proto_init() }
func file_pkg_hooks_grpc_proto_hook_proto_init() {
	if File_pkg_hooks_grpc_proto_hook_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_hooks_grpc_proto_hook_proto_rawDesc), len(file_pkg_hooks_grpc_proto_hook_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_hooks_grpc_proto_hook_proto_goTypes,
		DependencyIndexes: file_pkg_hooks_grpc_proto_hook_proto_depIdxs,
		MessageInfos:      file_pkg_hooks_grpc_proto_hook_proto_msgTypes,
	}.Build()
	File_pkg_hooks_grpc_proto_hook_proto = out.File
	file_pkg_hooks_grpc_proto_hook_proto_goTypes = nil
	file_pkg_hooks_grpc_proto_hook_proto_depIdxs = nil
}
